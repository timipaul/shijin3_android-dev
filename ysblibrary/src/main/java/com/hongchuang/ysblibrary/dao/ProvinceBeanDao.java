package com.hongchuang.ysblibrary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "wuche_base_province".
*/
public class ProvinceBeanDao extends AbstractDao<ProvinceBean, Void> {

    public static final String TABLENAME = "wuche_base_province";

    /**
     * Properties of entity ProvinceBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FID = new Property(0, String.class, "FID", false, "FID");
        public final static Property FNAME = new Property(1, String.class, "FNAME", false, "FNAME");
        public final static Property CFAREAIDID = new Property(2, String.class, "CFAREAIDID", false, "CFAREAIDID");
        public final static Property CFSTATE = new Property(3, String.class, "CFSTATE", false, "CFSTATE");
    }


    public ProvinceBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ProvinceBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProvinceBean entity) {
        stmt.clearBindings();
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(1, FID);
        }
 
        String FNAME = entity.getFNAME();
        if (FNAME != null) {
            stmt.bindString(2, FNAME);
        }
 
        String CFAREAIDID = entity.getCFAREAIDID();
        if (CFAREAIDID != null) {
            stmt.bindString(3, CFAREAIDID);
        }
 
        String CFSTATE = entity.getCFSTATE();
        if (CFSTATE != null) {
            stmt.bindString(4, CFSTATE);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProvinceBean entity) {
        stmt.clearBindings();
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(1, FID);
        }
 
        String FNAME = entity.getFNAME();
        if (FNAME != null) {
            stmt.bindString(2, FNAME);
        }
 
        String CFAREAIDID = entity.getCFAREAIDID();
        if (CFAREAIDID != null) {
            stmt.bindString(3, CFAREAIDID);
        }
 
        String CFSTATE = entity.getCFSTATE();
        if (CFSTATE != null) {
            stmt.bindString(4, CFSTATE);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ProvinceBean readEntity(Cursor cursor, int offset) {
        ProvinceBean entity = new ProvinceBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FNAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CFAREAIDID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // CFSTATE
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProvinceBean entity, int offset) {
        entity.setFID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCFAREAIDID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCFSTATE(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ProvinceBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ProvinceBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(ProvinceBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
